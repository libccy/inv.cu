[global]
mode = 0                     # (inverse/forward/adjoint)
nthread = 0                  # number of threads per block (0 for auto)

[forward/adjoint]
solver = 0                   # (fdm)
sh = 1                       # include SH wave
psv = 0                      # include P-SV wave
nt = 5000                    # number of timesteps
dt = 0.06                    # length of a timestep

model_type = 0               # (vp-vs/lambda-mu) parameterization of input/output model
trace_type = 1               # (velocity/displacement) parameterization of input/output trace/snapshot

abs_bottom = 1               # apply absorbing boundary to bottom edge
abs_right = 1                # apply absorbing boundary to right edge
abs_top = 0                  # apply absorbing boundary to top edge
abs_left = 1                 # apply absorbing boundary to left edge
abs_width = 20               # absorbing boundary width (grid)
abs_alpha = 0.015            # absorbing boundary parameter

[forward]
wfe = 200                    # write wavefield snapshot every wfe timestep

[adjoint]
sfe = 10                     # save wavefield snapshot for adjoint calculation every sfe timestep
misfit = 1                   # (waveform/envelope)
filter = 0                   # (gaussian/none)
filter_sigma = 5             # filter strength
trace_file = 1               # use existing trace files instead of generating traces

[optimization]
optimizer = 1                # (nlcg/lbfgs)
inv_iteration = 5            # total number of iterations
inv_cycle = 0                # periodically reset search direction
inv_sharpen = 0.0            # apply unsharp mask to output models
inv_lambda = 0               # invert lambda
inv_mu = 1                   # invert mu
inv_rho = 0                  # invert rho
nlcg_type = 1                # (Fletcher-Reeves/Pollak-Ribere)
nlcg_thresh = 0.0            # restart nlcg if angle(p_new, p_old) < thresh
lbfgs_mem = 5                # number of updates stored for lbfgs calculation
lbfgs_thresh = 0.0           # restart lbfgs if angle(p_new, -g_new) > pi/2 - thresh

[line-search]
ls_step = 10                 # maximum number of step per line search
ls_step_max = 0.5            # maximum step length of line search
ls_step_init = 0.05          # initial step length of line search
ls_thresh = 1.2              # stop if |log(x/x0)| < log(thresh)
